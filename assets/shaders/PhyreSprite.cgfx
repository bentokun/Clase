/* SCE CONFIDENTIAL
PhyreEngine(TM) Package 3.7.0.0
* Copyright (C) 2013 Sony Computer Entertainment Inc.
* All Rights Reserved.
*/


float4x4 WorldViewProjection	: WorldViewProjection;
sampler2D TextureSampler;

#ifdef __psp2__
	// Disable the unereferenced parameter warning.
	#pragma warning (disable:5203)
#endif //! __psp2__

struct InstancingInput
{
	float4	InstanceTransform0	: TEXCOORD5;
	float4	InstanceTransform1	: TEXCOORD6;
	float4	InstanceTransform2	: TEXCOORD7;
};

struct DefaultVSInput
{
	float2 Vertex				: POSITION;
	InstancingInput instancingInput;
};

struct DefaultVSForwardRenderOutput
{
	float4 Position				: POSITION;	
	float2 Uv					: TEXCOORD0;
};

struct DefaultPSForwardRenderInput
{
	float2 Uv					: TEXCOORD0;
};

DefaultVSForwardRenderOutput DefaultForwardRenderVS(DefaultVSInput IN)
{			
	////////////////////////////////////////////////////
	// See PSpriteAttributes for data layout ///////////
	////////////////////////////////////////////////////
    // IN.instancingInput.InstanceTransform0 contains //
    // posX, posY, sinPhi, cosPhi                     //
    // IN.instancingInput.InstanceTransform1 contains //
    // uOrigin, vOrigin, textureSizeX, textureSize    //
    // IN.instancingInput.InstanceTransform2 contains //
    // spriteSizeX, spriteSizeY, depth, Phi           //
    ////////////////////////////////////////////////////
    
    // Transform sprite into world space 
	DefaultVSForwardRenderOutput OUT;
	float4 trans = IN.instancingInput.InstanceTransform0 * float4(1.0f, 1.0f, -1.0f, 1.0f);
	
	// Texture coordinates.
	OUT.Uv = (IN.Vertex.xy + float2(0.5f, 0.5f)) * IN.instancingInput.InstanceTransform1.zw + IN.instancingInput.InstanceTransform1.xy;
	
	IN.Vertex.xy *= IN.instancingInput.InstanceTransform2.xy;                              // Scale
	float y = dot(float3(1.0f, IN.Vertex.xy), IN.instancingInput.InstanceTransform0.yzw);  // Rotate + Translate
	float x = dot(float3(1.0f, IN.Vertex.yx), trans.xzw);                                  // Rotate + Translate
		
	// Transform from world space to view
	OUT.Position = mul(WorldViewProjection, float4(x, y, IN.instancingInput.InstanceTransform2.z, 1.0f));
	
	return OUT;
}

float4 ForwardRenderFP(DefaultPSForwardRenderInput In) : COLOR0
{
	return tex2D(TextureSampler, In.Uv); 
}


technique ForwardRender < string PhyreRenderPass = "Transparent"; >
{
	pass pass0
	{
		DepthTestEnable = true;
		DepthFunc = LEqual;
		DepthMask = true;	
		BlendEnable = true;
		colorWriteEnable = bool4(true, true, true, true);
		CullFaceEnable = true;
		CullFace = back;
		VertexProgram = compile vp40 DefaultForwardRenderVS();
		FragmentProgram = compile fp40 ForwardRenderFP();
	}
}
