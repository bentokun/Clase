/* SCE CONFIDENTIAL
PhyreEngine(TM) Package 3.7.0.0
* Copyright (C) 2013 Sony Computer Entertainment Inc.
* All Rights Reserved.
*/

#include "PhyreShaderPlatform.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Switches. 

// Material switch definitions. These are the material switches this shader exposes.
bool PhyreMaterialSwitches 
< 
string MaterialSwitchNames[] = {"LAYERED_TEXTURE_MODE_OVER_NONE_ENABLED", "MULTIPLE_UVS_ENABLED", "VERTEX_COLOR_ENABLED", "LIGHTING_ENABLED", "TEXTURE_ENABLED","ALPHA_ENABLED", "NORMAL_MAPPING_ENABLED", "WRAP_DIFFUSE_LIGHTING", "SPECULAR_ENABLED", "CASTS_SHADOWS", "RECEIVE_SHADOWS", "DOUBLE_SIDED", "MOTION_BLUR_ENABLED", "GENERATE_LIGHTS"}; 
string MaterialSwitchUiNames[] = {"Layered Texture Mode Over None", "Enable Multiple UVs", "Enable Vertex Color", "Enable Lighting","Enable Texture", "Enable Transparency", "Enable Normal Mapping", "Use Wrap Diffuse Lighting", "Enable Specular", "Casts Shadows", "Receive Shadows", "Render Double Sided","Motion Blur Enabled", "Generate Lights"}; 
string MaterialSwitchDefaultValues[] = {"", "", "", "", "", "", "", "", "", "", "1", "", "", ""}; 
>;

#include "PhyreSceneWideParameters.h"
#include "PhyreDefaultShaderSharedCode.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Global shader parameters.
#ifdef ALPHA_ENABLED
half AlphaThreshold : ALPHATHRESHOLD = 0.0;		// The alpha threshold.
#endif //! ALPHA_ENABLED

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Structures
struct ShadowTexturedVSInput
{
#ifdef SKINNING_ENABLED
	float3 SkinnableVertex : POSITION;
#else //! SKINNING_ENABLED
	float4 Position	: POSITION;
#endif //! SKINNING_ENABLED
	float2 Uv	: TEXCOORD0;
#ifdef SKINNING_ENABLED
	float4 SkinIndices : COLOR0;
	float4 SkinWeights : TEXCOORD2;
#endif //! SKINNING_ENABLED
#ifdef MULTIPLE_UVS_ENABLED
	float2 Uv1	: TEXCOORD3;
#endif //! MULTIPLE_UVS_ENABLED
};

struct ShadowTexturedVSOutput
{
#ifdef VERTEX_COLOR_ENABLED
	float4 Color : COLOR0;
#endif //! VERTEX_COLOR_ENABLED
	float4 Position	: POSITION;	
	float2 Uv	: TEXCOORD0;
#ifdef MULTIPLE_UVS_ENABLED
	float2 Uv1	: TEXCOORD1;
#endif //! MULTIPLE_UVS_ENABLED
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vertex shaders

// Default shadow vertex shader.
ShadowTexturedVSOutput ShadowTexturedVS(ShadowTexturedVSInput IN)
{
	ShadowTexturedVSOutput Out = (ShadowTexturedVSOutput)0;	
#ifdef SKINNING_ENABLED
	float3 position = IN.SkinnableVertex.xyz;
	UNNORMALIZE_SKININDICES(IN.SkinIndices);
	EvaluateSkinPosition4Bones(position.xyz, IN.SkinWeights, IN.SkinIndices, BoneTransforms);
	Out.Position = mul(scene.ViewProjection, float4(position.xyz,1));	
#else //! SKINNING_ENABLED
	float3 position = IN.Position.xyz;
	Out.Position = mul(WorldViewProjection, float4(position.xyz,1));
#endif //! SKINNING_ENABLED
	Out.Uv = IN.Uv;
	return Out;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Fragment shaders.

// Forward render fragment shader
float4 ForwardRenderFP(DefaultPSForwardRenderInput In) : FRAG_OUTPUT_COLOR0
{
#ifdef VERTEX_COLOR_ENABLED
	half4 shadingResult = In.Color * MaterialColour;
#else //! VERTEX_COLOR_ENABLED
	half4 shadingResult = MaterialColour;
#endif //! VERTEX_COLOR_ENABLED

#ifdef TEXTURE_ENABLED
	half4 texValue = h4tex2D(TextureSampler, In.Uv);
	shadingResult *= texValue;

#ifdef MULTIPLE_UVS_ENABLED
#ifdef LAYERED_TEXTURE_MODE_OVER_NONE_ENABLED
	half4 tex2 = h4tex2D(TextureSampler1, In.Uv1);
	float3 fc = shadingResult.xyz;
	float  fa = shadingResult.w;
	float3 bc = tex2.xyz;
	float  ba = tex2.w;
	shadingResult.xyz = fc * fa + (bc * (1.0f - fa));
	shadingResult.w = 1.0f - ((1.0f - ba) * (1.0f - fa));
#endif //! LAYERED_TEXTURE_MODE_OVER_NONE_ENABLED
#endif //! MULTIPLE_UVS_ENABLED

#endif //! TEXTURE_ENABLED

#ifdef USE_LIGHTING
	// Read the normal here before any LOD clip, to keep the normal map texture read non-dependent on PlayStation(R)Vita.
	half3 normal = EvaluateNormal(In);
#endif //! USE_LIGHTING

	// Do alpha test and screendoor LOD Blend early.
#ifdef ALPHA_ENABLED
	clip(shadingResult.w - AlphaThreshold);
#endif //! ALPHA_ENABLED

#ifdef LOD_BLEND
	clip(GetLODDitherValue(GET_LOD_FRAGMENT_UV(In.ScreenPosition)));
#endif //! LOD_BLEND

	// Lighting
#ifdef USE_LIGHTING
	half glossValue = 1;
#ifdef TEXTURE_ENABLED
	glossValue = texValue.w;
#endif //! TEXTURE_ENABLED
	half3 lightResult = EvaluateLightingDefault(In, In.WorldPositionDepth.xyz, normal, glossValue);
	shadingResult *= half4(((lightResult * MaterialDiffuse) + MaterialEmissiveness), 1);
#endif //! USE_LIGHTING

#ifdef FOG_ENABLED
	shadingResult.xyz = EvaluateFog(shadingResult.xyz, In.WorldPositionDepth.w);
#endif //! FOG_ENABLED
#ifdef TONE_MAP_ENABLED
	shadingResult = ToneMap(shadingResult.xyz);
#endif //! TONE_MAP_ENABLED

	return shadingResult;
}

// Light pre pass second pass shader. Samples the light prepass buffer.
#ifdef __psp2__
__nativecolor __regformat half4 LightPrepassApplyFP(DefaultPSLightPrepassRenderInput In, __regformat half4 fragColor : FRAGCOLOR)
#else //! __psp2__
float4 LightPrepassApplyFP(DefaultPSLightPrepassRenderInput In) : FRAG_OUTPUT_COLOR0
#endif //! __psp2__
{
#ifdef VERTEX_COLOR_ENABLED
	half4 shadingResult = In.Color;
#else //! VERTEX_COLOR_ENABLED
	half4 shadingResult = MaterialColour;
#endif //! VERTEX_COLOR_ENABLED
#ifdef TEXTURE_ENABLED
	shadingResult *= h4tex2D(TextureSampler, In.Uv);
#ifdef MULTIPLE_UVS_ENABLED
#endif //! MULTIPLE_UVS_ENABLED
#endif //! TEXTURE_ENABLED

#ifdef __psp2__
#ifdef USE_LIGHTING
	shadingResult *= fragColor;
#endif //! USE_LIGHTING
#else //! __psp2__

	// Lighting
#ifdef USE_LIGHTING
#ifdef LIGHTPREPASS_ENABLED
	float2 screenUv = In.ScreenPosition.xy * scene.screenWidthHeightInv;
	half4 lightResult = tex2D(LightPrepassSampler, screenUv);
#else //! LIGHTPREPASS_ENABLED
	half4 lightResult = 1;
#endif //! LIGHTPREPASS_ENABLED
#ifdef SPECULAR_ENABLED
	lightResult.xyz += (half)(lightResult.w * Shininess);
#endif //! SPECULAR_ENABLED
	shadingResult.xyz *= (half3)((lightResult.xyz * MaterialDiffuse) + MaterialEmissiveness);
#endif //! SPECULAR_ENABLED

#ifdef FOG_ENABLED
	shadingResult.xyz = EvaluateFog(shadingResult.xyz, In.WorldPositionDepth.w);
#endif //! FOG_ENABLED
#ifdef TONE_MAP_ENABLED
	shadingResult = ToneMap(shadingResult.xyz);
#endif //! TONE_MAP_ENABLED

#endif //! __psp2__

	return shadingResult;
}


// Textured shadow shader.
#ifdef __psp2__
__nativecolor __regformat unsigned char4 ShadowTexturedFP(ShadowTexturedVSOutput IN)
//half4 ShadowTexturedFP(ShadowTexturedVSOutput IN) : FRAG_OUTPUT_COLOR0
#else //! __psp2__
float4 ShadowTexturedFP(ShadowTexturedVSOutput IN) : FRAG_OUTPUT_COLOR0
#endif //! __psp2__
{
#ifdef ALPHA_ENABLED

#ifdef VERTEX_COLOR_ENABLED
	half4 shadingResult = IN.Color;
#else //! VERTEX_COLOR_ENABLED
	half4 shadingResult = MaterialColour;
#endif //! VERTEX_COLOR_ENABLED

#ifdef TEXTURE_ENABLED
	shadingResult *= h4tex2D(TextureSampler, IN.Uv);
#ifdef MULTIPLE_UVS_ENABLED
#endif //! MULTIPLE_UVS_ENABLED
#endif //! TEXTURE_ENABLED

	half alphaValue = shadingResult.w;
	clip(alphaValue - AlphaThreshold);
#endif //! ALPHA_ENABLED
	return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Techniques.

#ifndef ALPHA_ENABLED

technique ForwardRender
<
	string PhyreRenderPass = "Opaque";
	string VpIgnoreContextSwitches[] = {"NUM_LIGHTS"};
	string FpIgnoreContextSwitches[] = {"INSTANCING_ENABLED"};
>
{
	pass pass0
	{
		DepthTestEnable=true;
		DepthFunc = LEqual;
#ifdef ZPREPASS_ENABLED
		DepthMask = false;
#else //! ZPREPASS_ENABLED
		DepthMask = true;	
#endif //! ZPREPASS_ENABLED
		BlendEnable = false;
		ColorMask = bool4(true,true,true,true);
#ifdef DOUBLE_SIDED
		CullFaceEnable = false;
#else //! DOUBLE_SIDED
		CullFaceEnable = true;
#ifndef MAX
		CullFace = back;
#endif //! MAX
#endif //! DOUBLE_SIDED
		VertexProgram = compile vp40 DefaultForwardRenderVS();
		FragmentProgram = compile fp40 ForwardRenderFP();
	}
}

#endif //! ALPHA_ENABLED

#ifdef ALPHA_ENABLED

technique ForwardRenderAlpha
<
	string PhyreRenderPass = "Transparent";
	string VpIgnoreContextSwitches[] = {"NUM_LIGHTS"};
	string FpIgnoreContextSwitches[] = {"INSTANCING_ENABLED"};
>
{
	pass pass0
	{
		DepthTestEnable=true;
		DepthFunc = LEqual;
#ifdef ZPREPASS_ENABLED
		DepthMask = false;
#else //! ZPREPASS_ENABLED
		DepthMask = true;	
#endif //! ZPREPASS_ENABLED
		BlendEnable = true;
		BlendFunc = {srcAlpha,oneMinusSrcAlpha};
		ColorMask = bool4(true,true,true,true);
#ifdef DOUBLE_SIDED
		CullFaceEnable = false;
#else //! DOUBLE_SIDED
		CullFaceEnable = true;
#ifndef MAX
		CullFace = back;
#endif //! MAX
#endif //! DOUBLE_SIDED
		VertexProgram = compile vp40 DefaultForwardRenderVS();
		FragmentProgram = compile fp40 ForwardRenderFP();
	}
}

#endif //! ALPHA_ENABLED

#ifdef CASTS_SHADOWS

#ifdef ALPHA_ENABLED

technique ShadowTransparent
<
	string PhyreRenderPass = "ShadowTransparent";
	string VpIgnoreContextSwitches[] = {"NUM_LIGHTS", "LOD_BLEND"};
	string FpIgnoreContextSwitches[] = {"NUM_LIGHTS", "INSTANCING_ENABLED"};
>
{
	pass p0
	{
		DepthTestEnable=true;
		DepthMask = true;
		DepthFunc = LEqual;
		BlendEnable = false;
		AlphaTestEnable = false;
		ColorMask = bool4(false,false,false,false);
#ifdef DOUBLE_SIDED
		CullFaceEnable = false;
#else //! DOUBLE_SIDED
		CullFaceEnable = true;
#ifndef MAX
		CullFace = back;
#endif //! MAX
#endif //! DOUBLE_SIDED
		VertexProgram = compile vp40 ShadowTexturedVS();
		FragmentProgram = compile fp40 ShadowTexturedFP();
	}
}

#else //! ALPHA_ENABLED

technique Shadow
<
	string PhyreRenderPass = "Shadow";
	string VpIgnoreContextSwitches[] = {"NUM_LIGHTS", "LOD_BLEND"};
	string FpIgnoreContextSwitches[] = {"NUM_LIGHTS", "LOD_BLEND", "INSTANCING_ENABLED"};
>
{
	pass p0
	{
		DepthTestEnable=true;
		DepthMask = true;
		DepthFunc = LEqual;
		BlendEnable = false;
		AlphaTestEnable = false;
		ColorMask = bool4(false,false,false,false);
#ifdef DOUBLE_SIDED
		CullFaceEnable = false;
#else //! DOUBLE_SIDED
		CullFaceEnable = true;
#ifndef MAX
		CullFace = back;
#endif //! MAX
#endif //! DOUBLE_SIDED
		VertexProgram = compile vp40 DefaultShadowVS();
		FragmentProgram = compile fp40 DefaultShadowFP();
	}
}

#endif //! ALPHA_ENABLED

#endif //! CASTS_SHADOWS

#ifndef ALPHA_ENABLED

technique ZPrePass
<
	string PhyreRenderPass = "ZPrePass";
	string VpIgnoreContextSwitches[] = {"NUM_LIGHTS", "LOD_BLEND"};
	string FpIgnoreContextSwitches[] = {"NUM_LIGHTS", "INSTANCING_ENABLED"};
>
{
	pass p0
	{
		DepthTestEnable=true;
		DepthMask = true;
		DepthFunc = LEqual;
		ColorMask = bool4(false,false,false,false);
#ifdef DOUBLE_SIDED
		CullFaceEnable = false;
#else //! DOUBLE_SIDED
		CullFaceEnable = true;
#ifndef MAX
		CullFace = back;
#endif //! MAX
#endif //! DOUBLE_SIDED
		VertexProgram = compile vp40 DefaultZPrePassVS();
		FragmentProgram = compile fp40 DefaultUnshadedFP();
	}
}

#endif //! ALPHA_ENABLED


#if 0 // Note: These techniques are disabled until future support is added
#ifndef ALPHA_ENABLED

technique LightPrePass
<
	string PhyreRenderPass = "LightPrePass";
	string VpIgnoreContextSwitches[] = {"NUM_LIGHTS", "LOD_BLEND"};
	string FpIgnoreContextSwitches[] = {"NUM_LIGHTS", "INSTANCING_ENABLED"};
>
{
	pass p0
	{
		DepthTestEnable=true;
#ifdef ZPREPASS_ENABLED
		DepthMask = false;
#else //! ZPREPASS_ENABLED
		DepthMask = true;	
#endif //! ZPREPASS_ENABLED
		DepthFunc = LEqual;
		ColorMask = bool4(true,true,true,true);
#ifdef DOUBLE_SIDED
		CullFaceEnable = false;
#else //! DOUBLE_SIDED
		CullFaceEnable = true;
#ifndef MAX
		CullFace = back;
#endif //! MAX
#endif //! DOUBLE_SIDED
		VertexProgram = compile vp40 DefaultForwardRenderVS();
		FragmentProgram = compile fp40 DefaultLightPrepassFP();
	}
}

technique LightPreMaterialPass
<
	string PhyreRenderPass = "LightPrePassMaterial";
	string VpIgnoreContextSwitches[] = {"NUM_LIGHTS", "LOD_BLEND"};
	string FpIgnoreContextSwitches[] = {"NUM_LIGHTS", "INSTANCING_ENABLED"};
>
{
	pass
	{
		DepthTestEnable=true;
		DepthMask = false;
		DepthFunc = LEqual;
		ColorMask = bool4(true,true,true,true);
#ifdef DOUBLE_SIDED
		CullFaceEnable = false;
#else //! DOUBLE_SIDED
		CullFaceEnable = true;
#ifndef MAX
		CullFace = back;
#endif //! MAX
#endif //! DOUBLE_SIDED
		VertexProgram = compile vp40 DefaultForwardRenderVS();
		FragmentProgram = compile fp40 LightPrepassApplyFP();
	}
}


#endif //! ALPHA_ENABLED

#endif //! Disabled techniques

#ifndef ALPHA_ENABLED

// Techniques
technique DeferredRender
<
	string PhyreRenderPass = "DeferredRender";
	string VpIgnoreContextSwitches[] = {"NUM_LIGHTS", "LOD_BLEND"};
	string FpIgnoreContextSwitches[] = {"NUM_LIGHTS", "INSTANCING_ENABLED"};
>
{
	pass
	{
		DepthTestEnable=true;
		DepthFunc = LEqual;
#ifdef ZPREPASS_ENABLED
		DepthMask = false;
#else //! ZPREPASS_ENABLED
		DepthMask = true;	
#endif //! ZPREPASS_ENABLED
		ColorMask = bool4(true,true,true,true);
#ifdef DOUBLE_SIDED
		CullFaceEnable = false;
#else //! DOUBLE_SIDED
		CullFaceEnable = true;
#ifndef MAX
		CullFace = back;
#endif //! MAX
#endif //! DOUBLE_SIDED		
#ifdef MOTION_BLUR_ENABLED
		StencilFunc = {always, 1, 0xff};
#else //! MOTION_BLUR_ENABLED
		StencilFunc = {always, 0, 0xff};
#endif //! MOTION_BLUR_ENABLED
		StencilOp = {replace,keep,replace};

		VertexProgram = compile vp40 DefaultDeferredRenderVS();
		FragmentProgram = compile fp40 DefaultDeferredRenderFP();
	}
}

#endif //! ALPHA_ENABLED
